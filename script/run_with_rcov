#!/usr/bin/env ruby

require 'require_relative'
require 'test/unit'
require 'rcov'
require 'pp'
require_relative '../test/calculator_test.rb'


def get_overlaps
  overlaps = {}

  Dir.glob(File.expand_path('../test/**/*.rb', File.dirname(__FILE__))) do |test_file|
    test_cases = test_cases_from_file(test_file)
    pp [test_file, test_cases]
=begin
    test_cases.each do |test_case|
      analyzer = Rcov::CodeCoverageAnalyzer.new
      analyzer.run_hooked do
        test_case.new(nil).run
      end
      analyzer.analyzed_files.each do |file|
        next if file =~ /gems/
        overlaps[file] ||= {}
        lines, marked_info, count_info = analyzer.data(file)
        marked_info.each_with_index do |elem, index|
          overlaps[file][index] ||= {}
          if elem
            overlaps[file][index][test_file] ||= []
            overlaps[file][index][test_file] << test_case.to_sym
          end
        end
      end
    end
=end
  end
  return overlaps
end

# {
#  'calculator.rb' => {
#    1 => {:calculator_test => :test_should_multiplicate},
#    2 => {:calculator_test => [:test_should_multiplicate, :should_sum]},
#    3 => {}
#  },
#  'sum.rb' => {}
# }
#

class Object
  def at_exit
  end
end

def test_cases_from_file(test_file)
  existing_classes = ObjectSpace.each_object(Class).to_a
  require test_file
  new_classes = ObjectSpace.each_object(Class).to_a - existing_classes
  new_classes.select{|klass| klass < Test::Unit::TestCase}
end

pp get_overlaps
